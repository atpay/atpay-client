#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'atpay_tokens'
require 'yaml'
require 'csv'
require 'trollop'

$opts = Trollop::options do
  version "atpay-token-generator v2.0"

  # Global
  opt :private_key, "[global] The private key given to you by @Pay", :type => :string
  opt :public_key, "[global] @Pay's public key, given to you by @Pay", :type => :string
  opt :partner_id, "[global] The partner ID given to you by @Pay", :type => :integer
  opt :environment, "[global] The environment you want to generate buttons for. Currently sandbox or production", :default => 'production', :type => :string
  opt :config, "[global] The path to a configuration file in yml format", :type => :string
  opt :type, "[global] The type of token to generate (site,email)", :type => :string

  # Per Token
  opt :card, "[site-token, email-token] The card token associated with the recipient of this token. If `type` is site, this must be present", :type => :string
  opt :email, "[email-token] The email associated with the receipt of this token. Incomptible when `type` is 'site'", :type => :string

  opt :amount, "[token] The amount a user should be charged for the transaction you're generating a token for", :default => 5.0
  opt :user_data, "[token] Data to pass back as a reference", :type => :string
  opt :expires, "[token] Expiration date for token, integer value of seconds since epoch", :type => :integer

  # Site Token Specific
  opt :header_user_agent, "[site-token] The HTTP_USER_AGENT from the client's request header (if `type` is 'site')", :type => :string
  opt :header_accept_language, "[site-token] The HTTP_ACCEPT_LANGUAGE from the client's request header (if `type` is 'site')", :type => :string
  opt :header_accept_charset, "[site-token] The HTTP_ACCEPT_CHARSET from the client's request header (if `type` is 'site')", :type => :string
  opt :ip_address, "[site-token] The IP address of the token recipient (if `type` is 'site')", :type => :string
end

Trollop::die :amount, "must not be negative" if $opts[:amount] < 0
Trollop::die :private_key, "required" if $opts[:private_key].nil?
Trollop::die :partner_id, "required" if $opts[:partner_id].nil?

module Args
  class Main
    def to_hash
      read_from_file.update(read_from_cli)   
    end

    def tokens
      @token_set ||= TokenSet.new
    end
  
    private
    def read_from_file
      {} || (YAML.load_file($opts[:config]) if $opts[:config])
    end

    def read_from_cli
      %w(
        private_key
        public_key
        partner_id
        environment
      ).inject({}) { |h,v| h[v]=$opts[v.to_sym]; h }
    end
  end

  class TokenSet
    def next_token
      if cli?
        cli
      else
        stdin
      end
    end

    private
    def cli?
      ($opts[:card] or $opts[:email]) and $opts[:type]
    end

    def cli
      return nil if @cli_read
      @cli_read = true

      $opts
    end

    def csv
      @csv ||= CSV.new($stdin, :headers => true)
    end

    def stdin
      unless csv.eof?
        csv.shift.to_hash
      end
    end
  end
end

class Generator
  def initialize(config)
    @config = config
  end

  def session
    options = @config.to_hash

    @session ||= AtPay::Session.new({
      :private_key => options["private_key"],
      :public_key => options["public_key"],
      :partner_id => options["partner_id"].to_i,
      :environment => options["environment"].to_sym
    })
  end

  def row_option_check(options)
    Trollop::die :card, "must be present for site tokens" if site? and options[:card].nil?
    Trollop::die :header_user_agent, "must be present for site_tokens" if site? and options[:header_user_agent].nil?
    Trollop::die :header_accept_language, "must be present for site_tokens" if site? and options[:header_accept_language].nil?
    Trollop::die :header_accept_charset, "must be present for site_tokens" if site? and options[:header_accept_charset].nil?
    Trollop::die :ip_address, "must be present for site_tokens" if site? and options[:ip_address].nil?
    Trollop::die :email, "or card must be present for all rows" if email? and (options[:card].nil? and options[:email].nil?)
    Trollop::die :amount, "must be present" if options[:amount].nil?
  end

  def next
    return unless options=next_config
    options[:amount] = options[:amount].to_f

    row_option_check(options)

    security_key = session.security_key(options)

    if email?
      security_key.email_token
    elsif site?
      security_key.site_token
    end
  end

  private
  def next_config
    options = @config.tokens.next_token

    options.inject({}){|h,(k,v)| 
      h[k.to_sym] = v; h 
    } if options
  end

  def email?
    $opts[:type] == "email"
  end

  def site?
    $opts[:type] == "site"
  end
end

config = Args::Main.new
generator = Generator.new(config)

while token=generator.next
  puts token
end
